#!/usr/bin/env ruby
require 'trollop'
require 'trak'
require 'trak/exit'
require 'trak/core_ext/time'

# place where data is stored
datadir = "#{ENV['HOME']}/Documents/Tracker/"
%x[mkdir -p #{datadir}]

# define command line options
opts = Trollop::options do
  version "trak version 0.1.0"
  banner <<-BANNER
Trak: log chunks of time from the command line
Usage:
    trak [-d|--date] <time> <message> # tracking mode
    trak [-d|--date] [-r|--report]    # reporting mode
    trak [-d|--date] -e|--edit        # opens time log in EDITOR

Tracking time:
    The <time> argument is the amount of time spent on the task, in
    minutes. Append "h" for hours, e.g., 1.5h. Examples:

        $ trak 15 email       # minimum 15 minutes
        $ trak 25 lunch       # rounded to nearest 15m, i.e. 30
        $ trak 1.5h bug 2345  # everything after <time> is the message

Reporting:
    The -r|--report option is optional, just typing `trak` with no
    arguments will cause Trak to print a report for today. Use -d|--date
    to print the report for another day.

Dates:
    Trak currently accepts dates in the format YYYY-MM-DD. All modes
    accept the date argument (defaults to today).

See http://github.com/sharplet/trak for more information.

Options:
BANNER
  opt :date, "Specify the date of the log to work with",
      :type => String, :short => "-d"
  opt :report, "Print a report for the specified date", :short => "-r"
  opt :list, "Dump todays report file to stdout", :short => "-l"
  opt :edit, "Open the log for the specified date in EDITOR"
end

# all valid options have been processed, so figure out which mode
# we're in...
#
# if we found a -r option, ignore everything else
if opts[:report]
  MODE = 'report'
elsif opts[:list]
  MODE = 'list'
# now check if the user wants edit mode
elsif opts[:edit]
  MODE = 'edit'
# if there are still unprocessed args (that didn't look like switches),
# we're in insert mode
elsif ARGV.length > 0
  MODE = 'insert'
# if all else fails, there were probably no args to begin with, so we're
# in report mode
else
  MODE = 'report'
end

today = Time.now.strftime '%F'

# did the user supply a date argument that isn't today?
if opts[:date] && opts[:date] != today
  fdate = opts[:date]
# otherwise use today's date, formatted, and set date_arg to be false
else
  fdate = today
  opts[:date] = nil
end

# set the output file name
filename = "#{datadir}#{fdate}-time-log.txt"

if MODE == 'report'
  TimeLog.for_date_string(fdate).report

elsif MODE == 'list'
  if File.exist? filename
    exec "cat", filename
    exit
  end

elsif MODE == 'edit'
  if File.exist? filename
    if ENV['EDITOR']
      exec "#{ENV['EDITOR']} #{filename}"
    else
      exec "open", filename
    end
    exit
  else
    Exit::exit_err "#{__FILE__}: #{filename} does not exist or unable to open."
  end

elsif MODE == 'insert'
  if opts[:date]
    puts "WARNING: Adding time to a day other than today is not recommended."
    print "Continue? (y/n) "
    input = STDIN.readline.chomp
    unless input =~ /^y(es)?/i
        Exit::exit_err "Timelog update cancelled."
    end
  end

  # process arguments
  minutes = Trak::processTimeArgument ARGV.shift
  message = ARGV.join(" ")

  # open the output file
  first_time = !File.exist?(filename)
  begin
    File.open filename, 'a', :autoclose => true do |file|
      if first_time
        currentTimeInMinutes = Time.now.to_minutes
        startTime = Trak::minutesToTime((currentTimeInMinutes - minutes).round_to_nearest 15)
        file.puts "#{fdate} #{startTime}"
      end
      file.puts "#{minutes}: #{message}"
    end
  rescue
    Exit::exit_err "Couldn't open #{filename}: #{$!}"
  end

else
    Exit::exit_err "Couldn't determine the correct mode (I was given '#{MODE}'): #{$!}"
end
